<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>AWS on 🏔️ MLOps Journey</title><link>https://keonhoban.github.io/mlops-journey/categories/aws/</link><description>Recent content in AWS on 🏔️ MLOps Journey</description><generator>Hugo -- 0.145.0</generator><language>ko</language><lastBuildDate>Tue, 15 Jul 2025 17:55:05 +0900</lastBuildDate><atom:link href="https://keonhoban.github.io/mlops-journey/categories/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>[MLOps 플랫폼 구축 : Airflow-MLflow-FastAPI (Helm)]</title><link>https://keonhoban.github.io/mlops-journey/projects/mlops_pipeline/helm/</link><pubDate>Tue, 15 Jul 2025 17:55:05 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/projects/mlops_pipeline/helm/</guid><description>&lt;h2 id="-실전-시나리오-기반-구성-배경">🧩 실전 시나리오 기반 구성 배경&lt;/h2>
&lt;blockquote>
&lt;p>이 프로젝트는 단순 실습을 넘어서, 실제 발생하는 다음과 같은 문제들을 해결하기 위한 MLOps 인프라 구축을 목표로 설계되었습니다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>여러 모델 실험 결과가 뒤섞여 추적이 어려운 문제&lt;/strong>&lt;br>
→ MLflow Tracking 서버 + PostgreSQL 메타데이터 저장소 구성&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>모델 파일 및 로그가 로컬에만 저장되어 협업 및 재현성이 떨어지는 문제&lt;/strong>&lt;br>
→ S3 기반 artifact store 구성 + pyfunc 기반 모델 서빙 구조 설계&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>수작업 DAG 등록, 모델 배포 등의 비효율적 운영 문제&lt;/strong>&lt;br>
→ Airflow + GitSync 연동으로 파이프라인 자동화 및 버전 관리 가능&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 6단계: 실시간 모델 핫스왑 구조 실험]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/06/</link><pubDate>Thu, 10 Jul 2025 17:12:00 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/06/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“모델 배포 시 실무에서는 새 모델이 학습된 뒤,&lt;/p>
&lt;p>기존 모델과 교체되는 과정을 자동화할 필요가 있습니다.&lt;/p>
&lt;p>Airflow에서 학습 DAG 실행 → MLflow 등록 → FastAPI가 새 모델 로딩 구조는,&lt;/p>
&lt;p>초기 핫스왑 형태를 실험한 예제입니다.”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>DAG로 train_model_v1/v2 학습 → MLflow에 등록&lt;/li>
&lt;li>FastAPI 재시작으로 모델 핫스왑 → 수동 초기 구조지만 &lt;strong>배포 자동화 실험&lt;/strong>의 기반&lt;/li>
&lt;li>추후엔 A/B Test, Canary, Zero-Downtime 구성으로 확장 가능&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-tldr">✅ TL;DR&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Airflow&lt;/code>에서 선택한 모델 버전에 따라 학습 스크립트를 다르게 실행&lt;/li>
&lt;li>학습된 모델을 &lt;code>MLflow Model Registry&lt;/code>에 등록 → Production 단계로 자동 승격&lt;/li>
&lt;li>&lt;code>FastAPI&lt;/code> 서버는 &lt;code>Production 모델&lt;/code>을 다시 로드 → 별도 코드 수정 없이 핫스왑 완료&lt;/li>
&lt;li>실무에서 모델 검증/배포 사이클 자동화에 바로 응용 가능&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-구조-다이어그램-핫스왑-흐름">🧠 구조 다이어그램 (핫스왑 흐름)&lt;/h2>
&lt;p>&lt;img alt="06" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/06.png">&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 5단계: FastAPI 서빙: MLflow 모델 연동 및 핫스왑 구조 구축]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/05/</link><pubDate>Mon, 07 Jul 2025 17:11:55 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/05/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“ 모델을 수동으로 넣는 것이 아니라,&lt;/p>
&lt;p>MLflow에 등록된 Production 모델을 서빙 API에서 &lt;strong>자동 로딩&lt;/strong>하는 구조를 지향합니다.”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>FastAPI는 경량화된 서빙 서버로서 적합&lt;/li>
&lt;li>MLflow &lt;code>pyfunc.load_model()&lt;/code>을 통해 자동 로딩 → CI/CD 및 모델 자동화 가능&lt;/li>
&lt;li>S3와 연결되므로, “로컬 복사본 관리 X”, 재현성 유지&lt;/li>
&lt;li>API 호출을 통해 실제 추론 결과 확인 가능&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-tldr">✨ TL;DR&lt;/h2>
&lt;ul>
&lt;li>MLflow에서 등록한 모델을 &lt;strong>FastAPI 기반 REST API&lt;/strong>로 서빙합니다.&lt;/li>
&lt;li>&lt;code>mlflow.pyfunc.load_model()&lt;/code>을 통해 &lt;strong>Stage별 버전 관리&lt;/strong>, &lt;strong>핫스왑&lt;/strong>, &lt;strong>모델 정보 조회&lt;/strong>가 가능합니다.&lt;/li>
&lt;li>쿠버네티스 기반으로 Helm Chart 배포 + AWS 인증 Secret + Ingress 접근까지 연동합니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-아키텍처-구성도">📐 아키텍처 구성도&lt;/h2>
&lt;p>&lt;img alt="05" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/05.png">&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 4단계: Airflow : GitSync + 외부 PostgreSQL + Secret 연동]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/04/</link><pubDate>Thu, 03 Jul 2025 17:11:53 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/04/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“실무에서는 데이터 파이프라인이나 모델 학습 작업을 수시로 업데이트하게 되며,&lt;/p>
&lt;p>이를 수동으로 업로드하지 않고 Git 기반으로 관리하는 것이 필수입니다.&lt;/p>
&lt;p>Airflow는 GitSync 기능을 통해 DAG를 자동 동기화할 수 있습니다.”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>DAG 코드가 Git으로 관리되어야 리뷰, 히스토리, 협업 가능&lt;/li>
&lt;li>GitSync → DAG 자동 배포 (CI/CD 개념 적용)&lt;/li>
&lt;li>Secret으로 Git 인증 → 조직 내 GitOps 문화와 연계&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-tldr">✨ TL;DR&lt;/h2>
&lt;ul>
&lt;li>Helm을 통해 Airflow를 배포하면서 DAG 코드를 Git 저장소에서 자동으로 동기화하는 구조 설계&lt;/li>
&lt;li>GitSync, Secret 기반 SSH 인증, 외부 PostgreSQL, AWS S3 연동까지 포함해 구성&lt;/li>
&lt;li>UI 접근은 Ingress를 통해 이루어지며, 로그는 PVC 또는 S3로 설정 가능&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-아키텍처-구성도">📐 아키텍처 구성도&lt;/h2>
&lt;p>&lt;img alt="04" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/04.png">&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 3단계: MLflow : PostgreSQL + S3 연동 기반 Helm 구성]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/03/</link><pubDate>Mon, 30 Jun 2025 17:11:51 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/03/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“MLflow Tracking 서버는 단순 모델 학습이 아닌 모델의 실험 이력, 하이퍼파라미터, 성능 지표 등을 추적하는 역할을 합니다.&lt;/p>
&lt;p>따라서 단일 머신/로컬 환경이 아닌, &lt;strong>서버 기반 Tracking 환경이 필요합니다.&lt;/strong>”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>한 프로젝트에 여러 버전의 모델이 등장하고,&lt;/p>
&lt;p>각각 어떤 실험으로부터 나왔는지 **‘회고 가능한 로그’**가 필요함&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MLflow Tracking Server + PostgreSQL → 모델 실험 로그 저장&lt;/p>
&lt;/li>
&lt;li>
&lt;p>S3 연동 → 모델 파일 저장 위치 분리 (서빙, 재사용 대비)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-tldr">✨ TL;DR&lt;/h2>
&lt;ul>
&lt;li>MLflow를 도입시 &lt;strong>PostgreSQL, S3, 인증 정보 주입, Helm 배포, Ingress 연동 등&lt;/strong> 설계&lt;/li>
&lt;li>MLflow를 Helm으로 배포하면서 고려한 항목(보안, 아티팩트 저장소, UI 접근 등) 구성&lt;/li>
&lt;li>커스텀 Docker 이미지로 &lt;code>psycopg2&lt;/code> 설치, Helm chart 구성, Secret 연결까지 포함&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-아키텍처-구성도-with-secret--연동-흐름">📐 아키텍처 구성도 (with Secret &amp;amp; 연동 흐름)&lt;/h2>
&lt;p>&lt;img alt="03" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/03.png">&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 2단계: S3 &amp; PostgreSQL 연동을 위한 구성 및 Secret 관리 전략]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/02/</link><pubDate>Thu, 26 Jun 2025 17:11:49 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/02/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“모든 구성 요소가 외부 DB, GitHub, S3 등 민감한 리소스와 연동되기 때문에,&lt;/p>
&lt;p>API 키 및 비밀번호를 직접 넣는 건 보안상 위험합니다.&lt;/p>
&lt;p>따라서 Kubernetes Secret을 활용해 민감한 정보 노출을 최소화합니다.”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>GitSync용 &lt;strong>SSH Key&lt;/strong>를 Secret으로 주입 → GitHub 인증&lt;/li>
&lt;li>Airflow DAG 내에서 DB 접속을 위한 커넥션 정보도 Secret 처리&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-tldr">✨ TL;DR&lt;/h2>
&lt;ul>
&lt;li>외부 리소스(AWS S3, DB 등)와 연결할 때, 인증 정보를 직접 코드나 YAML에 노출하는 건 보안상 위험&lt;/li>
&lt;li>Kubernetes에서는 &lt;code>Secret&lt;/code>과 &lt;code>ConfigMap&lt;/code>, 그리고 &lt;code>envFrom&lt;/code>, &lt;code>volumeMount&lt;/code> 방식을 조합하여 사용 가능&lt;/li>
&lt;li>이번 포스팅에서는 MLflow, Airflow, FastAPI와 AWS S3 &amp;amp; PostgreSQL을 연동할 때 사용한 &lt;strong>Secret 구성 전략&lt;/strong>과 마주친 이슈 및 해결책 공유&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-아키텍처-구성도">🧱 아키텍처 구성도&lt;/h2>
&lt;p>&lt;img alt="02" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/02.png">&lt;/p></description></item><item><title>[MLOps 플랫폼 구축 - 1단계: 인프라 설계 및 환경 준비]</title><link>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/01/</link><pubDate>Mon, 23 Jun 2025 17:11:47 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/mlops-pipeline-helm/01/</guid><description>&lt;h2 id="-시나리오-설명">🧠 시나리오 설명&lt;/h2>
&lt;blockquote>
&lt;p>“ML 모델을 실험하고 추적하려면 단순 Jupyter Notebook으론 부족합니다.&lt;/p>
&lt;p>Kubernetes 기반의 인프라를 선택한 이유는 다음과 같습니다.”&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Kubernetes&lt;/strong>:&lt;/p>
&lt;p>👉 ML 모델 학습 및 서빙이 점점 컨테이너 기반으로 이뤄지고 있으며,&lt;/p>
&lt;p>자원 할당, 스케일링, 리소스 격리를 위한 플랫폼으로 &lt;strong>사실상 표준&lt;/strong>이 되었음&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>NFS 구성&lt;/strong>:&lt;/p>
&lt;p>👉 MLflow UI 내의 로그, 메타데이터 등 &lt;strong>파일 기반 공유 스토리지 필요&lt;/strong>,&lt;/p>
&lt;p>로컬 볼륨은 Pod가 재시작되거나 이동하면 휘발되므로,&lt;/p>
&lt;p>&lt;strong>여러 Pod 간 공유가 가능한 파일 스토리지가 필수&lt;/strong>&lt;/p>
&lt;p>(※ 실무에서는 AWS EFS, GCP Filestore 등을 대체로 사용)&lt;/p></description></item><item><title>AWS SAP-C02 합격 후기</title><link>https://keonhoban.github.io/mlops-journey/posts/aws/01/</link><pubDate>Mon, 02 Jun 2025 12:09:40 +0900</pubDate><guid>https://keonhoban.github.io/mlops-journey/posts/aws/01/</guid><description>&lt;h2 id="1--왜-sap를-준비했을까">1. 📌 왜 SAP를 준비했을까?&lt;/h2>
&lt;ul>
&lt;li>현재 MLOps 엔지니어를 목표로 하며,&lt;/li>
&lt;li>&lt;strong>AWS 기반 인프라 설계 및 운영 능력 강화&lt;/strong>가 필요하다고 판단했습니다.&lt;/li>
&lt;li>SAP는 단순 암기보다 &lt;strong>시나리오 기반 설계 사고력&lt;/strong>을 묻기 때문에
학습 과정 자체가 실무 사고 확장에 큰 도움이 되었습니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2--공부-방법--자료">2. 📚 공부 방법 &amp;amp; 자료&lt;/h2>
&lt;ul>
&lt;li>📘 주요 개념은 문제별로 정리본 작성&lt;/li>
&lt;li>🧠 매일 오답 복습 &amp;amp; 회상 기반 학습
&lt;ul>
&lt;li>왜 정답일지, 실제 아키텍처에서 어떤 선택을 할지 예상하며 진행하는게 도움이 됐습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>항목&lt;/th>
&lt;th>내용&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>준비 기간&lt;/td>
&lt;td>약 1개월&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>방식&lt;/td>
&lt;td>🔁 덤프, AWS 공식 문서, 개인 요약본&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실전 훈련&lt;/td>
&lt;td>랜덤 75문제 모의고사 3회 → 최종 85~94점대 유지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>참고 자료&lt;/td>
&lt;td>- ExamTopics (최신 SAP-C02 기준 / 529 문제)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>AWS 공식 문서&lt;/li>
&lt;li>개인 노션 요약&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3--합격-인증">3. ✅ 합격 인증&lt;/h2>
&lt;p>&lt;img alt="AWS SAP 합격 인증" loading="lazy" src="https://keonhoban.github.io/mlops-journey/images/aws-sap-pass.png">&lt;/p></description></item></channel></rss>